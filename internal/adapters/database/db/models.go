// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type TokenScope string

const (
	TokenScopePASSWORDRESET     TokenScope = "PASSWORD_RESET"
	TokenScopeEMAILVERIFICATION TokenScope = "EMAIL_VERIFICATION"
	TokenScopeINVITATION        TokenScope = "INVITATION"
)

func (e *TokenScope) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TokenScope(s)
	case string:
		*e = TokenScope(s)
	default:
		return fmt.Errorf("unsupported scan type for TokenScope: %T", src)
	}
	return nil
}

type NullTokenScope struct {
	TokenScope TokenScope `json:"token_scope"`
	Valid      bool       `json:"valid"` // Valid is true if TokenScope is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTokenScope) Scan(value interface{}) error {
	if value == nil {
		ns.TokenScope, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TokenScope.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTokenScope) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TokenScope), nil
}

type UserStatus string

const (
	UserStatusPENDINGSETUP  UserStatus = "PENDING_SETUP"
	UserStatusPENDINGINVITE UserStatus = "PENDING_INVITE"
	UserStatusACTIVE        UserStatus = "ACTIVE"
	UserStatusSUSPENDED     UserStatus = "SUSPENDED"
)

func (e *UserStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserStatus(s)
	case string:
		*e = UserStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UserStatus: %T", src)
	}
	return nil
}

type NullUserStatus struct {
	UserStatus UserStatus `json:"user_status"`
	Valid      bool       `json:"valid"` // Valid is true if UserStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UserStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserStatus), nil
}

type Credential struct {
	UserID       pgtype.UUID        `json:"user_id"`
	PasswordHash string             `json:"password_hash"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

type Department struct {
	ID          pgtype.UUID        `json:"id"`
	Name        string             `json:"name"`
	Description pgtype.Text        `json:"description"`
	TenantID    pgtype.UUID        `json:"tenant_id"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type Designation struct {
	ID          pgtype.UUID        `json:"id"`
	Name        string             `json:"name"`
	Description pgtype.Text        `json:"description"`
	TenantID    pgtype.UUID        `json:"tenant_id"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type Role struct {
	ID          pgtype.UUID        `json:"id"`
	TenantID    pgtype.UUID        `json:"tenant_id"`
	Name        string             `json:"name"`
	Description pgtype.Text        `json:"description"`
	Permissions []string           `json:"permissions"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

type Token struct {
	Hash   []byte             `json:"hash"`
	UserID pgtype.UUID        `json:"user_id"`
	Expiry pgtype.Timestamptz `json:"expiry"`
	Scope  TokenScope         `json:"scope"`
}

type User struct {
	ID            pgtype.UUID        `json:"id"`
	FullName      string             `json:"full_name"`
	Email         string             `json:"email"`
	TenantID      pgtype.UUID        `json:"tenant_id"`
	EmployeeID    pgtype.Text        `json:"employee_id"`
	DepartmentID  pgtype.UUID        `json:"department_id"`
	DesignationID pgtype.UUID        `json:"designation_id"`
	PhoneNumber   pgtype.Text        `json:"phone_number"`
	JobTitle      pgtype.Text        `json:"job_title"`
	EmailVerified bool               `json:"email_verified"`
	Status        UserStatus         `json:"status"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
	LastLoginAt   pgtype.Timestamptz `json:"last_login_at"`
}

type UserRole struct {
	UserID   pgtype.UUID `json:"user_id"`
	TenantID pgtype.UUID `json:"tenant_id"`
	RoleID   pgtype.UUID `json:"role_id"`
}

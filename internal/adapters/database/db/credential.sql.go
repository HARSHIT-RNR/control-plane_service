// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: credential.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCredential = `-- name: CreateCredential :one

INSERT INTO credentials (user_id, password_hash)
VALUES ($1, $2)
RETURNING user_id, password_hash, created_at, updated_at
`

type CreateCredentialParams struct {
	UserID       pgtype.UUID `json:"user_id"`
	PasswordHash string      `json:"password_hash"`
}

// --- Credential Queries ---
func (q *Queries) CreateCredential(ctx context.Context, arg CreateCredentialParams) (Credential, error) {
	row := q.db.QueryRow(ctx, createCredential, arg.UserID, arg.PasswordHash)
	var i Credential
	err := row.Scan(
		&i.UserID,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createToken = `-- name: CreateToken :exec

INSERT INTO tokens (hash, user_id, expiry, scope)
VALUES ($1, $2, $3, $4)
`

type CreateTokenParams struct {
	Hash   []byte             `json:"hash"`
	UserID pgtype.UUID        `json:"user_id"`
	Expiry pgtype.Timestamptz `json:"expiry"`
	Scope  TokenScope         `json:"scope"`
}

// --- Token Queries (for password reset, email verification etc.) ---
func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) error {
	_, err := q.db.Exec(ctx, createToken,
		arg.Hash,
		arg.UserID,
		arg.Expiry,
		arg.Scope,
	)
	return err
}

const deleteCredential = `-- name: DeleteCredential :exec
DELETE FROM credentials
WHERE user_id = $1
`

func (q *Queries) DeleteCredential(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteCredential, userID)
	return err
}

const deleteExpiredTokens = `-- name: DeleteExpiredTokens :exec
DELETE FROM tokens
WHERE expiry < NOW()
`

func (q *Queries) DeleteExpiredTokens(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredTokens)
	return err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM tokens
WHERE hash = $1
`

func (q *Queries) DeleteToken(ctx context.Context, hash []byte) error {
	_, err := q.db.Exec(ctx, deleteToken, hash)
	return err
}

const deleteTokensByUserIDAndScope = `-- name: DeleteTokensByUserIDAndScope :exec
DELETE FROM tokens
WHERE user_id = $1 AND scope = $2
`

type DeleteTokensByUserIDAndScopeParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Scope  TokenScope  `json:"scope"`
}

func (q *Queries) DeleteTokensByUserIDAndScope(ctx context.Context, arg DeleteTokensByUserIDAndScopeParams) error {
	_, err := q.db.Exec(ctx, deleteTokensByUserIDAndScope, arg.UserID, arg.Scope)
	return err
}

const getCredential = `-- name: GetCredential :one
SELECT user_id, password_hash, created_at, updated_at FROM credentials
WHERE user_id = $1
`

func (q *Queries) GetCredential(ctx context.Context, userID pgtype.UUID) (Credential, error) {
	row := q.db.QueryRow(ctx, getCredential, userID)
	var i Credential
	err := row.Scan(
		&i.UserID,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getToken = `-- name: GetToken :one
SELECT hash, user_id, expiry, scope FROM tokens
WHERE hash = $1
`

func (q *Queries) GetToken(ctx context.Context, hash []byte) (Token, error) {
	row := q.db.QueryRow(ctx, getToken, hash)
	var i Token
	err := row.Scan(
		&i.Hash,
		&i.UserID,
		&i.Expiry,
		&i.Scope,
	)
	return i, err
}

const getUserAndCredentialByEmail = `-- name: GetUserAndCredentialByEmail :one
SELECT u.id as user_id, u.status, c.password_hash
FROM users u
JOIN credentials c ON u.id = c.user_id
WHERE u.email = $1 AND u.tenant_id = $2
`

type GetUserAndCredentialByEmailParams struct {
	Email    string      `json:"email"`
	TenantID pgtype.UUID `json:"tenant_id"`
}

type GetUserAndCredentialByEmailRow struct {
	UserID       pgtype.UUID `json:"user_id"`
	Status       UserStatus  `json:"status"`
	PasswordHash string      `json:"password_hash"`
}

func (q *Queries) GetUserAndCredentialByEmail(ctx context.Context, arg GetUserAndCredentialByEmailParams) (GetUserAndCredentialByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserAndCredentialByEmail, arg.Email, arg.TenantID)
	var i GetUserAndCredentialByEmailRow
	err := row.Scan(&i.UserID, &i.Status, &i.PasswordHash)
	return i, err
}

const updateCredential = `-- name: UpdateCredential :exec
UPDATE credentials
SET password_hash = $2, updated_at = NOW()
WHERE user_id = $1
`

type UpdateCredentialParams struct {
	UserID       pgtype.UUID `json:"user_id"`
	PasswordHash string      `json:"password_hash"`
}

func (q *Queries) UpdateCredential(ctx context.Context, arg UpdateCredentialParams) error {
	_, err := q.db.Exec(ctx, updateCredential, arg.UserID, arg.PasswordHash)
	return err
}

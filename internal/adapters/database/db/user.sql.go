// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const activateInvitedUser = `-- name: ActivateInvitedUser :exec
UPDATE users
SET status = 'ACTIVE', full_name = $2
WHERE id = $1
`

type ActivateInvitedUserParams struct {
	ID       pgtype.UUID `json:"id"`
	FullName string      `json:"full_name"`
}

// Updates a user's status from PENDING_INVITE to ACTIVE and sets their name.
func (q *Queries) ActivateInvitedUser(ctx context.Context, arg ActivateInvitedUserParams) error {
	_, err := q.db.Exec(ctx, activateInvitedUser, arg.ID, arg.FullName)
	return err
}

const createInitialAdmin = `-- name: CreateInitialAdmin :one
INSERT INTO users (
    full_name, email, tenant_id, status
) VALUES (
    $1, $2, $3, 'PENDING_SETUP'
) RETURNING id, full_name, email, tenant_id, employee_id, department_id, designation_id, phone_number, job_title, email_verified, status, created_at, updated_at, last_login_at
`

type CreateInitialAdminParams struct {
	FullName string      `json:"full_name"`
	Email    string      `json:"email"`
	TenantID pgtype.UUID `json:"tenant_id"`
}

// Creates the first admin user for a tenant, setting their status to PENDING_SETUP.
func (q *Queries) CreateInitialAdmin(ctx context.Context, arg CreateInitialAdminParams) (User, error) {
	row := q.db.QueryRow(ctx, createInitialAdmin, arg.FullName, arg.Email, arg.TenantID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.TenantID,
		&i.EmployeeID,
		&i.DepartmentID,
		&i.DesignationID,
		&i.PhoneNumber,
		&i.JobTitle,
		&i.EmailVerified,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one

INSERT INTO users (
    full_name, email, tenant_id, employee_id, department_id, designation_id, phone_number, job_title, status
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, full_name, email, tenant_id, employee_id, department_id, designation_id, phone_number, job_title, email_verified, status, created_at, updated_at, last_login_at
`

type CreateUserParams struct {
	FullName      string      `json:"full_name"`
	Email         string      `json:"email"`
	TenantID      pgtype.UUID `json:"tenant_id"`
	EmployeeID    pgtype.Text `json:"employee_id"`
	DepartmentID  pgtype.UUID `json:"department_id"`
	DesignationID pgtype.UUID `json:"designation_id"`
	PhoneNumber   pgtype.Text `json:"phone_number"`
	JobTitle      pgtype.Text `json:"job_title"`
	Status        UserStatus  `json:"status"`
}

// --- User Management Queries ---
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FullName,
		arg.Email,
		arg.TenantID,
		arg.EmployeeID,
		arg.DepartmentID,
		arg.DesignationID,
		arg.PhoneNumber,
		arg.JobTitle,
		arg.Status,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.TenantID,
		&i.EmployeeID,
		&i.DepartmentID,
		&i.DesignationID,
		&i.PhoneNumber,
		&i.JobTitle,
		&i.EmailVerified,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, full_name, email, tenant_id, employee_id, department_id, designation_id, phone_number, job_title, email_verified, status, created_at, updated_at, last_login_at FROM users
WHERE email = $1 AND tenant_id = $2
`

type GetUserByEmailParams struct {
	Email    string      `json:"email"`
	TenantID pgtype.UUID `json:"tenant_id"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, arg GetUserByEmailParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, arg.Email, arg.TenantID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.TenantID,
		&i.EmployeeID,
		&i.DepartmentID,
		&i.DesignationID,
		&i.PhoneNumber,
		&i.JobTitle,
		&i.EmailVerified,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
	)
	return i, err
}

const getUserByEmailAndTenant = `-- name: GetUserByEmailAndTenant :one
SELECT id, full_name, email, tenant_id, employee_id, department_id, designation_id, phone_number, job_title, email_verified, status, created_at, updated_at, last_login_at FROM users
WHERE email = $1 AND tenant_id = $2
`

type GetUserByEmailAndTenantParams struct {
	Email    string      `json:"email"`
	TenantID pgtype.UUID `json:"tenant_id"`
}

// Used to find a user during login or before inviting a new one.
func (q *Queries) GetUserByEmailAndTenant(ctx context.Context, arg GetUserByEmailAndTenantParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmailAndTenant, arg.Email, arg.TenantID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.TenantID,
		&i.EmployeeID,
		&i.DepartmentID,
		&i.DesignationID,
		&i.PhoneNumber,
		&i.JobTitle,
		&i.EmailVerified,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, full_name, email, tenant_id, employee_id, department_id, designation_id, phone_number, job_title, email_verified, status, created_at, updated_at, last_login_at FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.TenantID,
		&i.EmployeeID,
		&i.DepartmentID,
		&i.DesignationID,
		&i.PhoneNumber,
		&i.JobTitle,
		&i.EmailVerified,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, full_name, email, tenant_id, employee_id, department_id, designation_id, phone_number, job_title, email_verified, status, created_at, updated_at, last_login_at FROM users
WHERE tenant_id = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type ListUsersParams struct {
	TenantID pgtype.UUID `json:"tenant_id"`
	Limit    int32       `json:"limit"`
	Offset   int32       `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.TenantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Email,
			&i.TenantID,
			&i.EmployeeID,
			&i.DepartmentID,
			&i.DesignationID,
			&i.PhoneNumber,
			&i.JobTitle,
			&i.EmailVerified,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastLoginAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLastLogin = `-- name: UpdateLastLogin :exec
UPDATE users
SET last_login_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateLastLogin(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, updateLastLogin, id)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    full_name = $2,
    employee_id = $3,
    department_id = $4,
    designation_id = $5,
    job_title = $6
WHERE id = $1
RETURNING id, full_name, email, tenant_id, employee_id, department_id, designation_id, phone_number, job_title, email_verified, status, created_at, updated_at, last_login_at
`

type UpdateUserParams struct {
	ID            pgtype.UUID `json:"id"`
	FullName      string      `json:"full_name"`
	EmployeeID    pgtype.Text `json:"employee_id"`
	DepartmentID  pgtype.UUID `json:"department_id"`
	DesignationID pgtype.UUID `json:"designation_id"`
	JobTitle      pgtype.Text `json:"job_title"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.FullName,
		arg.EmployeeID,
		arg.DepartmentID,
		arg.DesignationID,
		arg.JobTitle,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.TenantID,
		&i.EmployeeID,
		&i.DepartmentID,
		&i.DesignationID,
		&i.PhoneNumber,
		&i.JobTitle,
		&i.EmailVerified,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
	)
	return i, err
}

const updateUserStatus = `-- name: UpdateUserStatus :exec
UPDATE users
SET status = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateUserStatusParams struct {
	ID     pgtype.UUID `json:"id"`
	Status UserStatus  `json:"status"`
}

func (q *Queries) UpdateUserStatus(ctx context.Context, arg UpdateUserStatusParams) error {
	_, err := q.db.Exec(ctx, updateUserStatus, arg.ID, arg.Status)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	// Updates a user's status from PENDING_INVITE to ACTIVE and sets their name.
	ActivateInvitedUser(ctx context.Context, arg ActivateInvitedUserParams) error
	// --- RBAC & Authorization Queries ---
	AssignRoleToUser(ctx context.Context, arg AssignRoleToUserParams) error
	CountDepartments(ctx context.Context, tenantID pgtype.UUID) (int64, error)
	CountDesignations(ctx context.Context, tenantID pgtype.UUID) (int64, error)
	// --- Credential Queries ---
	CreateCredential(ctx context.Context, arg CreateCredentialParams) (Credential, error)
	// --- Department Management Queries ---
	CreateDepartment(ctx context.Context, arg CreateDepartmentParams) (Department, error)
	// --- Designation Management Queries ---
	CreateDesignation(ctx context.Context, arg CreateDesignationParams) (Designation, error)
	// Creates the first admin user for a tenant, setting their status to PENDING_SETUP.
	CreateInitialAdmin(ctx context.Context, arg CreateInitialAdminParams) (User, error)
	// --- Role Management Queries ---
	CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error)
	// --- Token Queries (for password reset, email verification etc.) ---
	CreateToken(ctx context.Context, arg CreateTokenParams) error
	// --- User Management Queries ---
	CreateUser(ctx context.Context, arg CreateUserParams) (User, error)
	DeleteAllUserTokens(ctx context.Context, userID pgtype.UUID) error
	DeleteCredential(ctx context.Context, userID pgtype.UUID) error
	DeleteDepartment(ctx context.Context, id pgtype.UUID) error
	DeleteDesignation(ctx context.Context, id pgtype.UUID) error
	DeleteExpiredTokens(ctx context.Context) error
	DeleteRole(ctx context.Context, id pgtype.UUID) error
	DeleteToken(ctx context.Context, hash []byte) error
	DeleteTokensByUserIDAndScope(ctx context.Context, arg DeleteTokensByUserIDAndScopeParams) error
	DeleteUser(ctx context.Context, id pgtype.UUID) error
	GetCredential(ctx context.Context, userID pgtype.UUID) (Credential, error)
	GetDepartment(ctx context.Context, id pgtype.UUID) (Department, error)
	GetDesignation(ctx context.Context, id pgtype.UUID) (Designation, error)
	GetRoleByID(ctx context.Context, id pgtype.UUID) (Role, error)
	GetToken(ctx context.Context, hash []byte) (Token, error)
	GetUserAndCredentialByEmail(ctx context.Context, arg GetUserAndCredentialByEmailParams) (GetUserAndCredentialByEmailRow, error)
	GetUserByEmail(ctx context.Context, arg GetUserByEmailParams) (User, error)
	// Used to find a user during login or before inviting a new one.
	GetUserByEmailAndTenant(ctx context.Context, arg GetUserByEmailAndTenantParams) (User, error)
	GetUserByID(ctx context.Context, id pgtype.UUID) (User, error)
	GetUserRoles(ctx context.Context, arg GetUserRolesParams) ([]Role, error)
	ListDepartments(ctx context.Context, arg ListDepartmentsParams) ([]Department, error)
	ListDesignations(ctx context.Context, arg ListDesignationsParams) ([]Designation, error)
	ListRoles(ctx context.Context, tenantID pgtype.UUID) ([]Role, error)
	ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error)
	RevokeRoleFromUser(ctx context.Context, arg RevokeRoleFromUserParams) error
	UpdateCredential(ctx context.Context, arg UpdateCredentialParams) error
	UpdateDepartment(ctx context.Context, arg UpdateDepartmentParams) (Department, error)
	UpdateDesignation(ctx context.Context, arg UpdateDesignationParams) (Designation, error)
	UpdateLastLogin(ctx context.Context, id pgtype.UUID) error
	UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error)
	UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error)
	UpdateUserStatus(ctx context.Context, arg UpdateUserStatusParams) error
}

var _ Querier = (*Queries)(nil)

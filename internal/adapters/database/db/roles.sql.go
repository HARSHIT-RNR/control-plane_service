// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: roles.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const assignRoleToUser = `-- name: AssignRoleToUser :exec

INSERT INTO user_roles (user_id, tenant_id, role_id)
VALUES ($1, $2, $3)
ON CONFLICT (user_id, role_id) DO NOTHING
`

type AssignRoleToUserParams struct {
	UserID   pgtype.UUID `json:"user_id"`
	TenantID pgtype.UUID `json:"tenant_id"`
	RoleID   pgtype.UUID `json:"role_id"`
}

// --- RBAC & Authorization Queries ---
func (q *Queries) AssignRoleToUser(ctx context.Context, arg AssignRoleToUserParams) error {
	_, err := q.db.Exec(ctx, assignRoleToUser, arg.UserID, arg.TenantID, arg.RoleID)
	return err
}

const createRole = `-- name: CreateRole :one

INSERT INTO roles (id, tenant_id, name, description, permissions)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, tenant_id, name, description, permissions, created_at, updated_at
`

type CreateRoleParams struct {
	ID          pgtype.UUID `json:"id"`
	TenantID    pgtype.UUID `json:"tenant_id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Permissions []string    `json:"permissions"`
}

// --- Role Management Queries ---
func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, createRole,
		arg.ID,
		arg.TenantID,
		arg.Name,
		arg.Description,
		arg.Permissions,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.Description,
		&i.Permissions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles
WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteRole, id)
	return err
}

const getRoleByID = `-- name: GetRoleByID :one
SELECT id, tenant_id, name, description, permissions, created_at, updated_at FROM roles
WHERE id = $1
`

func (q *Queries) GetRoleByID(ctx context.Context, id pgtype.UUID) (Role, error) {
	row := q.db.QueryRow(ctx, getRoleByID, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.Description,
		&i.Permissions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserRoles = `-- name: GetUserRoles :many
SELECT r.id, r.tenant_id, r.name, r.description, r.permissions, r.created_at, r.updated_at FROM roles r
JOIN user_roles ur ON r.id = ur.role_id
WHERE ur.user_id = $1 AND ur.tenant_id = $2
`

type GetUserRolesParams struct {
	UserID   pgtype.UUID `json:"user_id"`
	TenantID pgtype.UUID `json:"tenant_id"`
}

func (q *Queries) GetUserRoles(ctx context.Context, arg GetUserRolesParams) ([]Role, error) {
	rows, err := q.db.Query(ctx, getUserRoles, arg.UserID, arg.TenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.Name,
			&i.Description,
			&i.Permissions,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoles = `-- name: ListRoles :many
SELECT id, tenant_id, name, description, permissions, created_at, updated_at FROM roles
WHERE tenant_id = $1
ORDER BY name
`

func (q *Queries) ListRoles(ctx context.Context, tenantID pgtype.UUID) ([]Role, error) {
	rows, err := q.db.Query(ctx, listRoles, tenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.Name,
			&i.Description,
			&i.Permissions,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeRoleFromUser = `-- name: RevokeRoleFromUser :exec
DELETE FROM user_roles
WHERE user_id = $1 AND role_id = $2
`

type RevokeRoleFromUserParams struct {
	UserID pgtype.UUID `json:"user_id"`
	RoleID pgtype.UUID `json:"role_id"`
}

func (q *Queries) RevokeRoleFromUser(ctx context.Context, arg RevokeRoleFromUserParams) error {
	_, err := q.db.Exec(ctx, revokeRoleFromUser, arg.UserID, arg.RoleID)
	return err
}

const updateRole = `-- name: UpdateRole :one
UPDATE roles
SET name = $2, description = $3, permissions = $4, updated_at = NOW()
WHERE id = $1
RETURNING id, tenant_id, name, description, permissions, created_at, updated_at
`

type UpdateRoleParams struct {
	ID          pgtype.UUID `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	Permissions []string    `json:"permissions"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, updateRole,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Permissions,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.Description,
		&i.Permissions,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: organization.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countDepartments = `-- name: CountDepartments :one
SELECT COUNT(*) FROM departments
WHERE tenant_id = $1
`

func (q *Queries) CountDepartments(ctx context.Context, tenantID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countDepartments, tenantID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countDesignations = `-- name: CountDesignations :one
SELECT COUNT(*) FROM designations
WHERE tenant_id = $1
`

func (q *Queries) CountDesignations(ctx context.Context, tenantID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countDesignations, tenantID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createDepartment = `-- name: CreateDepartment :one

INSERT INTO departments (id, name, description, tenant_id)
VALUES ($1, $2, $3, $4)
RETURNING id, name, description, tenant_id, created_at, updated_at
`

type CreateDepartmentParams struct {
	ID          pgtype.UUID `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	TenantID    pgtype.UUID `json:"tenant_id"`
}

// --- Department Management Queries ---
func (q *Queries) CreateDepartment(ctx context.Context, arg CreateDepartmentParams) (Department, error) {
	row := q.db.QueryRow(ctx, createDepartment,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.TenantID,
	)
	var i Department
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.TenantID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createDesignation = `-- name: CreateDesignation :one

INSERT INTO designations (id, name, description, tenant_id)
VALUES ($1, $2, $3, $4)
RETURNING id, name, description, tenant_id, created_at, updated_at
`

type CreateDesignationParams struct {
	ID          pgtype.UUID `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	TenantID    pgtype.UUID `json:"tenant_id"`
}

// --- Designation Management Queries ---
func (q *Queries) CreateDesignation(ctx context.Context, arg CreateDesignationParams) (Designation, error) {
	row := q.db.QueryRow(ctx, createDesignation,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.TenantID,
	)
	var i Designation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.TenantID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDepartment = `-- name: DeleteDepartment :exec
DELETE FROM departments
WHERE id = $1
`

func (q *Queries) DeleteDepartment(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteDepartment, id)
	return err
}

const deleteDesignation = `-- name: DeleteDesignation :exec
DELETE FROM designations
WHERE id = $1
`

func (q *Queries) DeleteDesignation(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteDesignation, id)
	return err
}

const getDepartment = `-- name: GetDepartment :one
SELECT id, name, description, tenant_id, created_at, updated_at FROM departments
WHERE id = $1
`

func (q *Queries) GetDepartment(ctx context.Context, id pgtype.UUID) (Department, error) {
	row := q.db.QueryRow(ctx, getDepartment, id)
	var i Department
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.TenantID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDesignation = `-- name: GetDesignation :one
SELECT id, name, description, tenant_id, created_at, updated_at FROM designations
WHERE id = $1
`

func (q *Queries) GetDesignation(ctx context.Context, id pgtype.UUID) (Designation, error) {
	row := q.db.QueryRow(ctx, getDesignation, id)
	var i Designation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.TenantID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listDepartments = `-- name: ListDepartments :many
SELECT id, name, description, tenant_id, created_at, updated_at FROM departments
WHERE tenant_id = $1
ORDER BY name
LIMIT $2 OFFSET $3
`

type ListDepartmentsParams struct {
	TenantID pgtype.UUID `json:"tenant_id"`
	Limit    int32       `json:"limit"`
	Offset   int32       `json:"offset"`
}

func (q *Queries) ListDepartments(ctx context.Context, arg ListDepartmentsParams) ([]Department, error) {
	rows, err := q.db.Query(ctx, listDepartments, arg.TenantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Department{}
	for rows.Next() {
		var i Department
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.TenantID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDesignations = `-- name: ListDesignations :many
SELECT id, name, description, tenant_id, created_at, updated_at FROM designations
WHERE tenant_id = $1
ORDER BY name
LIMIT $2 OFFSET $3
`

type ListDesignationsParams struct {
	TenantID pgtype.UUID `json:"tenant_id"`
	Limit    int32       `json:"limit"`
	Offset   int32       `json:"offset"`
}

func (q *Queries) ListDesignations(ctx context.Context, arg ListDesignationsParams) ([]Designation, error) {
	rows, err := q.db.Query(ctx, listDesignations, arg.TenantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Designation{}
	for rows.Next() {
		var i Designation
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.TenantID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDepartment = `-- name: UpdateDepartment :one
UPDATE departments
SET name = $2, description = $3, updated_at = NOW()
WHERE id = $1
RETURNING id, name, description, tenant_id, created_at, updated_at
`

type UpdateDepartmentParams struct {
	ID          pgtype.UUID `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateDepartment(ctx context.Context, arg UpdateDepartmentParams) (Department, error) {
	row := q.db.QueryRow(ctx, updateDepartment, arg.ID, arg.Name, arg.Description)
	var i Department
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.TenantID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateDesignation = `-- name: UpdateDesignation :one
UPDATE designations
SET name = $2, description = $3, updated_at = NOW()
WHERE id = $1
RETURNING id, name, description, tenant_id, created_at, updated_at
`

type UpdateDesignationParams struct {
	ID          pgtype.UUID `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateDesignation(ctx context.Context, arg UpdateDesignationParams) (Designation, error) {
	row := q.db.QueryRow(ctx, updateDesignation, arg.ID, arg.Name, arg.Description)
	var i Designation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.TenantID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
